<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>